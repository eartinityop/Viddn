name: Video Processor and Publisher

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: 'Direct download URL of the video'
        required: true
        type: string
      playback_speed:
        description: 'Desired playback speed (e.g., 1.5 for 1.5x)'
        required: true
        type: number
        default: 1.5
      split_timestamps:
        description: 'Comma-separated timestamps for splitting (HH:MM:SS)'
        required: true
        type: string
        default: '01:00:00,02:00:00'
      release_name:
        description: 'Release Name'
        required: true
        type: string
      video_title:
        description: 'Title for the YouTube Video'
        required: true
        type: string
        
permissions:
  contents: write

jobs:
  process-video:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install required packages
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg wget bc

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install yt-dlp google-api-python-client google-auth-httplib2 google-auth-oauthlib requests
      
    - name: Download video from provided URL
      run: |
        yt-dlp --oauth-client-id "${{ secrets.YT_CLIENT_ID }}" --oauth-client-secret "${{ secrets.YT_CLIENT_SECRET }}" --oauth-refresh-token "${{ secrets.YT_REFRESH_TOKEN }}" -f "best" -o "%(playlist_title)s/%(title)s [%(id)s].%(ext)s" --embed-metadata --embed-thumbnail --no-overwrites "https://www.youtube.com/playlist?list=YOUR_PLAYLIST_ID_HERE"

    - name: Get video duration
      run: |
        DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$ORIGINAL_FILENAME")
        echo "TOTAL_DURATION=$DURATION" >> $GITHUB_ENV
        echo "Total video duration: $DURATION seconds"

    - name: Prepare split points
      shell: bash
      run: |
        # Convert timestamps to seconds and add start/end points
        IFS=',' read -ra TIMESTAMPS <<< "${{ github.event.inputs.split_timestamps }}"
        
        # Add start point (0 seconds)
        SPLIT_POINTS="0"
        
        # Convert HH:MM:SS to seconds
        for timestamp in "${TIMESTAMPS[@]}"; do
          IFS=':' read -ra TIME <<< "$timestamp"
          HOURS=${TIME[0]}
          MINUTES=${TIME[1]}
          SECONDS=${TIME[2]}
          TOTAL_SECONDS=$((HOURS * 3600 + MINUTES * 60 + SECONDS))
          SPLIT_POINTS="$SPLIT_POINTS,$TOTAL_SECONDS"
        done
        
        # Add end point (total duration)
        SPLIT_POINTS="$SPLIT_POINTS,$TOTAL_DURATION"
        
        echo "SPLIT_POINTS=$SPLIT_POINTS" >> $GITHUB_ENV
        echo "Split points in seconds: $SPLIT_POINTS"

    - name: Split video into parts
      run: |
        IFS=',' read -ra POINTS <<< "$SPLIT_POINTS"
        PART_COUNT=0
        
        for i in $(seq 0 $((${#POINTS[@]} - 2))); do
          START=${POINTS[i]}
          END=${POINTS[i+1]}
          
          if (( $(echo "$END > $START" | bc -l) )); then
            PART_COUNT=$((PART_COUNT + 1))
            OUTPUT_FILE="${BASE_FILENAME}_part${PART_COUNT}.mp4"
            
            echo "Splitting part $PART_COUNT: $START to $END seconds"
            
            ffmpeg -i "$ORIGINAL_FILENAME" \
              -ss "$START" -to "$END" \
              -c copy \
              "$OUTPUT_FILE"
          fi
        done
        
        echo "PART_COUNT=$PART_COUNT" >> $GITHUB_ENV
        
    - name: Process each part with speed adjustment
      run: |
        for i in $(seq 1 $PART_COUNT); do
          INPUT_FILE="${BASE_FILENAME}_part${i}.mp4"
          OUTPUT_FILE="${BASE_FILENAME}_part${i}_processed.mp4"
          
          echo "Processing part $i: $INPUT_FILE"
          
          SPEED_FACTOR=$(echo "scale=10; 1 / ${{ github.event.inputs.playback_speed }}" | bc)      
        
          ffmpeg -i "$INPUT_FILE" -filter_complex "[0:v]setpts=0.6666666666*PTS[v];[0:a]atempo=${{ github.event.inputs.playback_speed }}[a]" -map "[v]" -map "[a]" -c:v libx264 -profile:v main -level 4.0 -pix_fmt yuv420p -c:a aac -b:a 128k -movflags +faststart "$OUTPUT_FILE"

          #Cleanup original split part
          rm -f "$INPUT_FILE"
        done
      
    - name: Create Release and Upload Asset
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: video-${{ github.run_id }}
        name: "${{ github.event.inputs.release_name }}"
        body: |
          Video split into ${{ env.PART_COUNT }} parts and processed at ${{ github.event.inputs.playback_speed }}x speed
          - Original URL: ${{ github.event.inputs.video_url }}
          - Split timestamps: ${{ github.event.inputs.split_timestamps }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload processed parts to Release
      run: |
        for i in $(seq 1 $PART_COUNT); do
          FILE="${BASE_FILENAME}_part${i}_processed.mp4"
          echo "Uploading $FILE to release"
          
          curl -s \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$FILE" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename "$FILE")"
        done

    - name: Generate YouTube access token
      run: |
        response=$(curl -s \
          -d "client_id=${{ secrets.YOUTUBE_CLIENT_ID }}" \
          -d "client_secret=${{ secrets.YOUTUBE_CLIENT_SECRET }}" \
          -d "refresh_token=${{ secrets.YOUTUBE_REFRESH_TOKEN }}" \
          -d "grant_type=refresh_token" \
          "https://oauth2.googleapis.com/token")
        
        access_token=$(echo $response | jq -r '.access_token')
        echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV

    - name: Upload to YouTube using Python script
      run: |
        # Download the upload script
        wget https://raw.githubusercontent.com/eartinityop/Viddn/YT/youtube_upload.py
    
        for i in $(seq 1 $PART_COUNT); do
          VIDEO_FILE="${BASE_FILENAME}_part${i}_processed.mp4"
          TITLE="${{ github.event.inputs.video_title }} - Part $i of $PART_COUNT"
          DESCRIPTION="Part $i of $PART_COUNT. Processed at ${{ github.event.inputs.playback_speed }}x speed"
      
          echo "Uploading part $i to YouTube..."
      
          python3 youtube_upload.py \
            --file "$VIDEO_FILE" \
            --title "$TITLE" \
            --description "$DESCRIPTION" \
            --access_token "$ACCESS_TOKEN" \
            --privacy "private"
        done
        
    - name: Final cleanup
      run: |
        # Clean up all processed files
        rm -f "$ORIGINAL_FILENAME"
        for i in $(seq 1 $PART_COUNT); do
          rm -f "${BASE_FILENAME}_part${i}_processed.mp4"
        done

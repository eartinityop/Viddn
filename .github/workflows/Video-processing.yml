name: Direct Links Video Processor and Uploader

on:
  workflow_dispatch:
    inputs:
      range_files_urls:
        description: 'Comma-separated URLs of text files containing direct download links for each range'
        required: true
        type: string
      playback_speed:
        description: 'Desired playback speed (e.g., 1.5 for 1.5x)'
        required: true
        type: number
        default: 1.5
      release_name:
        description: 'Release Name'
        required: true
        type: string
      video_title:
        description: 'Title for YouTube Video'
        required: true
        type: string

permissions:
  contents: write

jobs:
  process-videos:
    runs-on: ubuntu-latest
    timeout-minutes: 600

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install required packages
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg wget bc python3 python3-pip jq
        pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib

    - name: Download and rename range files
      run: |
        # Split the input URLs
        IFS=',' read -ra RANGE_FILE_URLS <<< "${{ github.event.inputs.range_files_urls }}"
        RANGE_COUNT=0
        
        for range_url in "${RANGE_FILE_URLS[@]}"; do
          RANGE_COUNT=$((RANGE_COUNT + 1))
          
          # Download the range file with proper naming
          echo "Downloading range file $RANGE_COUNT from: $range_url"
          wget -O "range_${RANGE_COUNT}.txt" "$range_url"
          
          # Check if download was successful
          if [ ! -f "range_${RANGE_COUNT}.txt" ] || [ ! -s "range_${RANGE_COUNT}.txt" ]; then
            echo "Error: Failed to download range file $RANGE_COUNT"
            exit 1
          fi
          
          echo "Contents of range_${RANGE_COUNT}.txt:"
          head -5 "range_${RANGE_COUNT}.txt"
          echo "---"
        done
        
        echo "RANGE_COUNT=$RANGE_COUNT" >> $GITHUB_ENV

    - name: Process each range
      run: |
        for range_index in $(seq 1 $RANGE_COUNT); do
          echo "Processing range $range_index"
          
          RANGE_FILE="range_${range_index}.txt"
          
          # Check if the range file exists and has content
          if [ ! -f "$RANGE_FILE" ] || [ ! -s "$RANGE_FILE" ]; then
            echo "Error: File $RANGE_FILE doesn't exist or is empty"
            exit 1
          fi
          
          # Read direct download links from the file
          VIDEO_INDEX=0
          while IFS= read -r LINE || [ -n "$LINE" ]; do
            # Skip empty lines
            if [ -z "$LINE" ]; then
              continue
            fi
            
            # Extract the direct download URL (remove numbering if present)
            DIRECT_URL=$(echo "$LINE" | sed -E 's/^[0-9]+\. //' | tr -d '"' | tr -d '\r')
            
            if [ -n "$DIRECT_URL" ]; then
              VIDEO_INDEX=$((VIDEO_INDEX + 1))
              
              echo "Downloading video $VIDEO_INDEX from direct URL: $DIRECT_URL"
              
              # Download using wget with retries
              for attempt in {1..3}; do
                echo "Attempt $attempt to download video..."
                wget -O "video_${range_index}_${VIDEO_INDEX}.mp4" "$DIRECT_URL"
                
                if [ $? -eq 0 ] && [ -f "video_${range_index}_${VIDEO_INDEX}.mp4" ]; then
                  echo "Download successful!"
                  break
                else
                  echo "Download failed on attempt $attempt"
                  if [ $attempt -lt 3 ]; then
                    echo "Waiting 5 seconds before retry..."
                    sleep 5
                  else
                    echo "All download attempts failed for: $DIRECT_URL"
                    # Create empty file to avoid script failure
                    touch "video_${range_index}_${VIDEO_INDEX}.mp4"
                  fi
                fi
              done
            fi
          done < "$RANGE_FILE"
          
          # If no videos were downloaded, skip the rest
          if [ $VIDEO_INDEX -eq 0 ]; then
            echo "No videos downloaded for range $range_index, skipping."
            continue
          fi
          
          # Create file list for concatenation
          for i in $(seq 1 $VIDEO_INDEX); do
            if [ -s "video_${range_index}_${i}.mp4" ]; then
              echo "file 'video_${range_index}_${i}.mp4'" >> "filelist_${range_index}.txt"
            fi
          done
          
          # Merge videos if we have valid files
          if [ -f "filelist_${range_index}.txt" ] && [ -s "filelist_${range_index}.txt" ]; then
            echo "Merging $VIDEO_INDEX videos for range $range_index"
            
            ffmpeg -f concat -safe 0 -i "filelist_${range_index}.txt" -c copy "merged_${range_index}.mp4"
            
            # Process with speed adjustment
            SPEED_FACTOR=$(echo "scale=10; 1 / ${{ github.event.inputs.playback_speed }}" | bc)
            
            ffmpeg -i "merged_${range_index}.mp4" \
            -filter_complex "[0:v]setpts=${SPEED_FACTOR}*PTS[v];[0:a]atempo=${{ github.event.inputs.playback_speed }}[a]" \
            -map "[v]" -map "[a]" \
            -c:v libx264 -profile:v main -level 4.0 -pix_fmt yuv420p \
            -c:a aac -b:a 128k \
            -movflags +faststart \
            "processed_range_${range_index}.mp4"
          else
            echo "No valid video files to merge for range $range_index"
          fi
          
          # Cleanup temporary files for this range
          rm -f "filelist_${range_index}.txt" "merged_${range_index}.mp4"
          for i in $(seq 1 $VIDEO_INDEX); do
            rm -f "video_${range_index}_${i}.mp4"
          done
        done

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: videos-${{ github.run_id }}
        name: "${{ github.event.inputs.release_name }}"
        body: |
          Videos processed at ${{ github.event.inputs.playback_speed }}x speed
          - Ranges processed: $RANGE_COUNT
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload processed ranges to Release
      run: |
        for i in $(seq 1 $RANGE_COUNT); do
          if [ -f "processed_range_${i}.mp4" ]; then
            echo "Uploading range $i to release"
            
            curl -s \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"processed_range_${i}.mp4" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=range_${i}.mp4"
          fi
        done

    - name: Generate YouTube access token
      run: |
        response=$(curl -s \
          -d "client_id=${{ secrets.YOUTUBE_CLIENT_ID }}" \
          -d "client_secret=${{ secrets.YOUTUBE_CLIENT_SECRET }}" \
          -d "refresh_token=${{ secrets.YOUTUBE_REFRESH_TOKEN }}" \
          -d "grant_type=refresh_token" \
          "https://oauth2.googleapis.com/token")
        
        access_token=$(echo $response | jq -r '.access_token')
        echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV

    - name: Upload to YouTube
      run: |
        # Download the upload script
        wget -q https://raw.githubusercontent.com/eartinityop/Viddn/YT/youtube_upload.py
        
        for i in $(seq 1 $RANGE_COUNT); do
          if [ -f "processed_range_${i}.mp4" ]; then
            VIDEO_FILE="processed_range_${i}.mp4"
            TITLE="${{ github.event.inputs.video_title }} - Range $i"
            DESCRIPTION="Range $i of $RANGE_COUNT. Processed at ${{ github.event.inputs.playback_speed }}x speed"
            
            echo "Uploading range $i to YouTube..."
            
            python3 youtube_upload.py \
              --file "$VIDEO_FILE" \
              --title "$TITLE" \
              --description "$DESCRIPTION" \
              --access_token "$ACCESS_TOKEN" \
              --privacy "private"
          fi
        done

    - name: Final cleanup
      run: |
        # Clean up all processed files
        for i in $(seq 1 $RANGE_COUNT); do
          rm -f "range_${i}.txt"
          rm -f "processed_range_${i}.mp4"
        done
        rm -f youtube_upload.py
